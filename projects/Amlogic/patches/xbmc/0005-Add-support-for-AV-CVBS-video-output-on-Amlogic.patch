From c2bb85005126e3fd9d6698c228307d540d46f320 Mon Sep 17 00:00:00 2001
From: Alex Deryskyba <alex@codesnake.com>
Date: Wed, 23 Jul 2014 22:23:34 +0300
Subject: [PATCH 05/15] Add support for AV (CVBS) video output on Amlogic

---
 xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp |   56 ++++++++++++++++++++++++---
 xbmc/windowing/egl/EGLNativeTypeAmlogic.h   |    1 +
 2 files changed, 51 insertions(+), 6 deletions(-)

diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
index 6235153..e4d5e8d 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
@@ -159,6 +159,10 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
           else
             SetDisplayResolution("1080p");
           break;
+        case 720:
+          if (!IsHdmiConnected())
+            SetDisplayResolution("480cvbs");
+          break;
       }
       break;
     case 50:
@@ -174,6 +178,10 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
           else
             SetDisplayResolution("1080p50hz");
           break;
+        case 720:
+          if (!IsHdmiConnected())
+            SetDisplayResolution("576cvbs");
+          break;
       }
       break;
     case 30:
@@ -189,10 +197,18 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
 
 bool CEGLNativeTypeAmlogic::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
 {
-  char valstr[256] = {0};
-  aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr, 255);
   std::vector<CStdString> probe_str;
-  StringUtils::SplitString(valstr, "\n", probe_str);
+  if (IsHdmiConnected())
+  {
+    char valstr[256] = {0};
+    aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr, 255);
+    StringUtils::SplitString(valstr, "\n", probe_str);
+  }
+  else
+  {
+    probe_str.push_back("480cvbs");
+    probe_str.push_back("576cvbs");
+  }
 
   resolutions.clear();
   RESOLUTION_INFO res;
@@ -210,8 +226,11 @@ bool CEGLNativeTypeAmlogic::GetPreferredResolution(RESOLUTION_INFO *res) const
   // check display/mode, it gets defaulted at boot
   if (!GetNativeResolution(res))
   {
-    // punt to 720p if we get nothing
-    ModeToResolution("720p", res);
+    // punt to 720p or 576cvbs if we get nothing
+    if (IsHdmiConnected())
+      ModeToResolution("720p", res);
+    else
+      ModeToResolution("576cvbs", res);
   }
 
   return true;
@@ -257,7 +276,25 @@ bool CEGLNativeTypeAmlogic::ModeToResolution(const char *mode, RESOLUTION_INFO *
   if (StringUtils::EndsWith(fromMode, "*"))
     fromMode.erase(fromMode.size() - 1);
 
-  if (fromMode.Equals("720p"))
+  if (fromMode.Equals("480cvbs"))
+  {
+    res->iWidth = 720;
+    res->iHeight= 480;
+    res->iScreenWidth = 720;
+    res->iScreenHeight= 480;
+    res->fRefreshRate = 60;
+    res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+  }
+  else if (fromMode.Equals("576cvbs"))
+  {
+    res->iWidth = 720;
+    res->iHeight= 576;
+    res->iScreenWidth = 720;
+    res->iScreenHeight= 576;
+    res->fRefreshRate = 50;
+    res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+  }
+  else if (fromMode.Equals("720p"))
   {
     res->iWidth = 1280;
     res->iHeight= 720;
@@ -430,3 +467,10 @@ void CEGLNativeTypeAmlogic::SetFramebufferResolution(int width, int height) cons
     close(fd0);
   }
 }
+
+bool CEGLNativeTypeAmlogic::IsHdmiConnected() const
+{
+  char hpd_state[2] = {0};
+  aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/hpd_state", hpd_state, 2);
+  return hpd_state[0] == '1';
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
index 0833571..ff254d5 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
@@ -56,6 +56,7 @@ protected:
 private:
   void SetFramebufferResolution(const RESOLUTION_INFO &res) const;
   void SetFramebufferResolution(int width, int height) const;
+  bool IsHdmiConnected() const;
 
   std::string m_framebuffer_name;
 };
-- 
1.7.9.5

